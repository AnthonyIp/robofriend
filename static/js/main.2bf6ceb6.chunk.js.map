{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/ErrorBoundary.jsx","components/Scroll.jsx","components/SearchBox.jsx","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","robots","map","robot","key","ErrorBoundary","context","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onRequestRobots","searchField","onSearchChange","isPending","console","log","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","axios","get","then","res","data","catch","err","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bf6ceb6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const {id, name, email} = props;\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow\" id={id}>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card  from \"./Card\";\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n                robots.map(robot => {\r\n                    return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>;\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops thats not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type=\"search\"\r\n                placeholder='search robot'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n);\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, {Component} from 'react';\r\nimport {connect}          from 'react-redux';\r\n\r\nimport {requestRobots, setSearchField} from \"../actions\";\r\nimport CardList                        from \"../components/CardList\";\r\nimport ErrorBoundary                   from \"../components/ErrorBoundary\";\r\nimport Scroll                          from \"../components/Scroll\";\r\nimport SearchBox                       from \"../components/SearchBox\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n\r\n        console.log(this.state);\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return isPending\r\n               ? <h1>Loading...</h1>\r\n               :\r\n               <div className='tc'>\r\n                   <h1>RoboFriends</h1>\r\n                   <SearchBox searchChange={onSearchChange}/>\r\n                   <Scroll>\r\n                       <ErrorBoundary>\r\n                           <CardList robots={filteredRobots}/>\r\n                       </ErrorBoundary>\r\n                   </Scroll>\r\n               </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots     : state.requestRobots.robots,\r\n        isPending  : state.requestRobots.isPending,\r\n        error      : state.requestRobots.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import axios                                                                                        from \"axios\";\r\nimport {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type   : CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n};\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    axios.get('https://jsonplaceholder.typicode.com/users')\r\n         .then(res => res.data)\r\n         .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n         .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\r\n    ;\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            // return Object.assign({}, state, {searchField: action.payload});\r\n            /*Same as above*/\r\n            return {...state, searchField: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            // return {...state, {isPending: true}};\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            // return {...state, {robots: action.payload, isPending: false}};\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            // return {...state, {error: action.payload, isPending: false}};\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React                                           from 'react';\nimport ReactDOM                                        from 'react-dom';\nimport {Provider}                                      from 'react-redux';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {createLogger}                                  from 'redux-logger';\nimport thunkMiddleware                                 from 'redux-thunk';\nimport App                                             from './containers/App';\nimport './index.css';\nimport {requestRobots, searchRobots}                   from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}